---
- name: Construct ISO
  hosts: localhost
  connection: local
  vars:
    ubuntu_version: "22.04.2"
    ubuntu_url: "https://releases.ubuntu.com/{{ ubuntu_version }}/ubuntu-{{ ubuntu_version }}-live-server-amd64.iso"
    ubuntu_checksum: sha256:5e38b55d57d94ff029719342357325ed3bda38fa80054f9330dc789cd2d43931
    ubuntu_autoinstall_iso_name: "./ubuntu-server-autoinstall.iso"
    ubuntu_iso_name: "./ubuntu-server.iso"
    ubuntu_iso_extraction_directory: "./ubuntu-server/"
    config_directory: "./config/"
    user_data_file: user-data.yaml
    secrets_directory: "./secrets/"
  tasks:
    - block:
        - name: Validate User Data YAML
          ansible.builtin.debug:
            msg: "{{ result }}"
          vars:
            user_data: >-
              {{ 
                lookup('ansible.builtin.file', config_directory + user_data_file)
              }}
            schema: >-
              {{ 
                lookup('ansible.builtin.file', config_directory + '/user-data-schema.json')
              }}
            result: >-
              {{ 
                lookup(
                  'ansible.utils.validate', 
                  user_data | from_yaml | to_json, 
                  schema, 
                  engine='ansible.utils.jsonschema', draft='draft7'
                )
              }}
          failed_when: (result | length) > 0

        - name: Ensure ubuntu server ISO exists
          ansible.builtin.get_url:
            url: "{{ ubuntu_url }}"
            dest: "{{ ubuntu_iso_name }}"
            checksum: "{{ ubuntu_checksum }}"

        - name: Ensure previous extraction is not present
          ansible.builtin.file:
            name: "{{ ubuntu_iso_extraction_directory }}"
            state: "{{ item }}"
          loop:
            - absent
            - directory
          
        - name: Extract ISO
          ansible.builtin.shell: "{{ item }}"
          loop:
            - "xorriso -osirrox on -indev {{ ubuntu_iso_name }} -extract / {{ ubuntu_iso_extraction_directory }}"
            - "chmod -R u+w {{ ubuntu_iso_extraction_directory }}"
        
        # nocloud user-data and cloud-data config
        - name: Ensure that nocloud directory is present on extraction
          ansible.builtin.file:
            name: "{{ ubuntu_iso_extraction_directory }}/nocloud"
            state: directory
        
        - name: Copy user-data into extracted iso
          ansible.builtin.copy:
            src: "{{ config_directory }}/{{ user_data_file }}"
            dest: "{{ ubuntu_iso_extraction_directory }}/nocloud/user-data"
        
        - name: Ensure meta-data is present
          ansible.builtin.file:
            name: "{{ ubuntu_iso_extraction_directory }}/nocloud/meta-data"
            state: touch
        
        # secrets
        # - name: Ensure secrets directory is present
        #   ansible.builtin.copy:
        #     src: "{{ secrets_directory }}/"
        #     dest: "{{ ubuntu_iso_extraction_directory }}/{{ secrets_directory }}/"
        
        # grub.cfg
        - name: Insert grub.cfg
          ansible.builtin.copy:
            src: "{{ config_directory }}/grub.cfg"
            dest: "{{ ubuntu_iso_extraction_directory }}/boot/grub/grub.cfg"
        
        - name: Ensure no previous ISO creations are present
          ansible.builtin.file:
            name: "{{ ubuntu_autoinstall_iso_name }}"
            state: absent

        # To generate relevant options for xorriso
        # run xorriso -indev ubuntu-server.iso -report_el_torito as_mkisofs
        # *ALWAYS KEEP -as mkisofs option
        # Make sure to add -o (output name) as well as source directory
        #   (extraction of original ISO)
        - name: Create ISO
          ansible.builtin.command:
            xorriso -as mkisofs
            {{ 
                lookup('ansible.builtin.pipe', command) | split('\n') | join(' ')
            }} 
            -o {{ ubuntu_autoinstall_iso_name }} 
            {{ ubuntu_iso_extraction_directory }}
          vars:
            command: "xorriso -indev {{ ubuntu_iso_name }} -report_el_torito as_mkisofs"
            # xorriso -as mkisofs \
            # -V "Ubuntu-Server {{ ubuntu_version }} LTS amd64"
            # --grub2-mbr --interval:local_fs:0s-15s:zero_mbrpt,zero_gpt:"{{ ubuntu_iso_name }}"
            # --protective-msdos-label
            # -partition_cyl_align off
            # -partition_offset 16
            # --mbr-force-bootable
            # -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b --interval:local_fs:3848588d-3858655d::"{{ ubuntu_iso_name }}"
            # -appended_part_as_gpt
            # -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7
            # -c '/boot.catalog'
            # -b '/boot/grub/i386-pc/eltorito.img'
            # -no-emul-boot
            # -boot-load-size 4
            # -boot-info-table
            # --grub2-boot-info
            # -eltorito-alt-boot
            # -e '--interval:appended_partition_2_start_962147s_size_10068d:all::'
            # -no-emul-boot
            # -boot-load-size 10068
            # -o {{ ubuntu_autoinstall_iso_name }}
            # {{ ubuntu_iso_extraction_directory }}
        
        # - name: Cleanup extraction
        #   ansible.builtin.file:
        #     name: "{{ ubuntu_iso_extraction_directory }}"
        #     state: absent

      rescue:
        - name: Cleanup extraction
          ansible.builtin.file:
            name: "{{ ubuntu_iso_extraction_directory }}"
            state: absent


# OLD: Does not work

    # Does not work because it does nothing to prepare the image
    # to inform machines that the image is bootable
    # (Though it does work on physical UEFI when booting off
    # FAT32 drive)
    #
    # - name: Create ISO
    #   ansible.builtin.shell: >-
    #     mkisofs -R
    #     -V "ubuntu auto"  
    #     -o ./ubuntu-server-autoinstall.iso 
    #     ./ubuntu-server/

    # Does not work:
    # community.general.iso_customize cannot add extensions to ISO 9660
    # We need extensions to write 'user-data' file needed for AutoInstall
    #
    # - community.general.iso_customize:
    #     add_files:
    #       - src_file: ./user-data.basic
    #         dest_file: nocloud/user-data
    #       - src_file: ./meta-data.yaml
    #         dest_file: nocloud/meta-data
    #       - src_file: ./grub.cfg
    #         dest_file: boot/grub/grub.cfg
    #     src_iso: ./ubuntu-server.iso
    #     dest_iso: ./ubuntu-server-autoinstall.iso